apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.1"

    defaultConfig {
        applicationId "com.androidcmake.example"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags ""
//                暂时没理解这个有什么用出
//                abiFilters 'x86', 'x86_64' , 'armeabi-v7a', 'arm64-v8a'
            }
        }
//        通常还是这样方法，来生成so。
            ndk {
    //        打出指定的架构的so库，并将指定的so库打包到apk中
                abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
        sourceSets {
            main.jniLibs.srcDirs = ['src/main/MySo']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
//        封装CMake构建配置。
        cmake {
//            提供到CMake构建脚本的相对路径。
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }


    /*

     这样通过flavors 可以更细粒度的来生成so。就可以取代
            ndk {
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
            }
      的写法了。
     */
//    flavorDimensions 'cpuArch'
//    productFlavors {
//        arm7 {
//            dimension 'cpuArch'
//            ndk {
//                abiFilter 'armeabi-v7a'
//            }
//        }
//        arm8 {
//            dimension 'cpuArch'
//            ndk {
//                abiFilters 'arm64-v8a'
//            }
//        }
//        x86 {
//            dimension 'cpuArch'
//            ndk {
//                abiFilter 'x86'
//            }
//        }
//        x86_64 {
//            dimension 'cpuArch'
//            ndk {
//                abiFilter 'x86_64'
//            }
//        }
//        universal {
//            dimension 'cpuArch'
//            // include all default ABIs. with NDK-r16,  it is:
//            //   armeabi-v7a, arm64-v8a, x86, x86_64
//        }
//    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
